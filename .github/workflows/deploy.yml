name: Production Deployment V2

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allow manual triggers

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
  DRAGONFLYDB_APP_NAME: ${{ secrets.DRAGONFLYDB_APP_NAME }}

jobs:
  deploy:
    name: Deploy to Fly.io
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Set production secrets
        run: |
          flyctl secrets set \
            DRAGONFLY_PASSWORD="${{ secrets.DRAGONFLY_PASSWORD }}" \
            -a ${{ env.DRAGONFLYDB_APP_NAME }}
      - name: Deploy application
        run: |
          flyctl deploy \
            -c fly.toml.dragonflydb \
            --app ${{ env.DRAGONFLYDB_APP_NAME }} \
            --remote-only \
            --wait-timeout 600
      
      - name: Setup Redis CLI cache
        id: cache-redis-cli
        uses: actions/cache@v4
        with:
          path: ~/.redis-cli-cache
          key: ${{ runner.os }}-redis-cli-v1
      
      - name: Install Redis CLI if not cached
        if: steps.cache-redis-cli.outputs.cache-hit != 'true'
        run: |
          echo "Cache miss - installing redis-tools..."
          sudo apt-get update && sudo apt-get install -y redis-tools
          mkdir -p ~/.redis-cli-cache
          cp $(which redis-cli) ~/.redis-cli-cache/
      
      - name: Run smoke tests
        run: |
          echo "Running connectivity tests..."
          # Use cached redis-cli if available, otherwise use system one
          if [ -f ~/.redis-cli-cache/redis-cli ]; then
            chmod +x ~/.redis-cli-cache/redis-cli
            ~/.redis-cli-cache/redis-cli -u "redis://default:${{ secrets.DRAGONFLY_PASSWORD }}@${{ env.DRAGONFLYDB_APP_NAME }}.fly.dev:6379" PING
          else
            redis-cli -u "redis://default:${{ secrets.DRAGONFLY_PASSWORD }}@${{ env.DRAGONFLYDB_APP_NAME }}.fly.dev:6379" PING
          fi
          echo "✅ Deployment completed successfully"

  notify:
    name: Notify on deployment status
    needs: deploy
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Report deployment status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "✅ Production deployment completed successfully"
          else
            echo "❌ Production deployment failed"
            exit 1
          fi