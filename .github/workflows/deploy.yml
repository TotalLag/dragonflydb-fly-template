name: Production Deployment

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allow manual triggers

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

env:
  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
  DRAGONFLYDB_APP_NAME: ${{ secrets.DRAGONFLYDB_APP_NAME }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Verify Fly.io authentication
        run: flyctl auth whoami > /dev/null 2>&1

      - name: Clear any existing machine leases
        run: |
          echo "Clearing machine leases..."
          flyctl machine leases clear -a ${{ env.DRAGONFLYDB_APP_NAME }} > /dev/null 2>&1 || true
        continue-on-error: true

      - name: Set production secrets
        run: |
          # Retry logic for setting secrets
          max_attempts=3
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Setting secrets attempt $attempt/$max_attempts..."
            
            if flyctl secrets set \
              DRAGONFLY_PASSWORD="${{ secrets.DRAGONFLY_PASSWORD }}" \
              -a ${{ env.DRAGONFLYDB_APP_NAME }} \
              --stage > /dev/null 2>&1; then
              echo "✅ Secrets configured"
              break
            else
              echo "❌ Attempt $attempt failed"
              if [ $attempt -eq $max_attempts ]; then
                echo "All attempts failed"
                exit 1
              fi
              
              echo "Retrying in 30 seconds..."
              sleep 30
              attempt=$((attempt + 1))
            fi
          done
        env:
          DRAGONFLY_PASSWORD: ${{ secrets.DRAGONFLY_PASSWORD }}

      - name: Deploy staged secrets
        run: |
          echo "Deploying secrets..."
          flyctl secrets deploy -a ${{ env.DRAGONFLYDB_APP_NAME }} --detach > /dev/null 2>&1

      - name: Deploy application
        run: |
          echo "Starting deployment..."
          flyctl deploy \
            -c fly.toml.dragonflydb \
            --app ${{ env.DRAGONFLYDB_APP_NAME }} \
            --remote-only \
            --wait-timeout 300 \
            --lease-timeout 30s \
            --detach > /dev/null 2>&1
          echo "✅ Deployment initiated"

      - name: Wait for deployment readiness
        run: |
          echo "Waiting for deployment to stabilize..."
          sleep 30
          
          # Check machine leases status (suppress output)
          echo "Checking system status..."
          flyctl machine leases view -a ${{ env.DRAGONFLYDB_APP_NAME }} > /dev/null 2>&1 || true
          
          # Check app status (suppress output)
          flyctl status -a ${{ env.DRAGONFLYDB_APP_NAME }} > /dev/null 2>&1

      - name: Verify deployment health
        run: |
          echo "Performing health checks..."
          flyctl status -a ${{ env.DRAGONFLYDB_APP_NAME }} > /dev/null 2>&1
          
          # Additional health checks (suppress output)
          flyctl machine list -a ${{ env.DRAGONFLYDB_APP_NAME }} > /dev/null 2>&1
          echo "✅ Health checks completed"

      - name: Run smoke tests
        run: |
          echo "Running connectivity tests..."
          # Add your smoke tests here
          echo "✅ Deployment completed successfully"

  notify:
    needs: deploy
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Report deployment status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "✅ Production deployment completed successfully"
          else
            echo "❌ Production deployment failed"
            exit 1
          fi